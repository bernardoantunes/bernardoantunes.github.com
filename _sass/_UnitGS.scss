//@import "UnitGS-Utils.scss";
//TODO: [ ] Check if we should have this in another place, for instance the grid-init.
//@import "UnitGS-Base.scss";

//Activates the debug mode.
$grid-debug: false !default;
//You can set any color property of the objects that you want to debug.
//Ex: To debug also the text color.
//$debug-properties-to-color: color background-color;
$debug-properties-to-color: background-color !default;

//The list of trace levels ordered by severity. The none deactivate the debug.
$debug-trace-levels: none information warning error;

//Indicates the minimum level of tracing when the $grid-debug is activated.
//By default all levels will be showned information, warning and error.
//You can shut the messages completly off by passing the parameter off - NOT ADVICED..
$gridgs-debug-minimum-trace-level-in-debug: information !default;

//Indicates the minimum level of tracing when the $grid-debug is not activated.
//By default only the errors are shown.
//You can shut the messages completly off by passing the parameter off - NOT ADVICED.
$gridgs-debug-minimum-trace-level: error !default;

$debug-column-color: ligthblue;
$debug-column-color-hue: 0;
$debug-column-color-saturation: 75%;
$debug-column-color-lightness: 70%;

//Generates a random color.
@function debug-generate-random-color(
	$color-hue-displacement: 0,
	$color-saturation-displacement: 0%,
	$color-lightness-displacement: 0%) {

	//Lets apply the color displacement.
	$debug-column-color-hue-with-displacement: $debug-column-color-hue + $color-hue-displacement;
	@if $debug-column-color-hue-with-displacement > 360 {
		$debug-column-color-hue-with-displacement: $debug-column-color-hue-with-displacement - 360;
	};
	$debug-column-color-saturation-with-displacement: $debug-column-color-saturation + $color-saturation-displacement;
	@if $debug-column-color-saturation-with-displacement > 100% {
		$debug-column-color-saturation-with-displacement: $debug-column-color-saturation-with-displacement - 100%;
	};
	$debug-column-color-lightness-with-displacement: $debug-column-color-lightness + $color-lightness-displacement;
	@if $debug-column-color-lightness-with-displacement > 100% {
		$debug-column-color-lightness-with-displacement: $debug-column-color-lightness-with-displacement - 100%;
	};

	//Lets set the color.
	$debug-column-color: hsl(
		$debug-column-color-hue-with-displacement,
		$debug-column-color-saturation-with-displacement,
		$debug-column-color-lightness-with-displacement);

	//Lets change the color.
	$debug-column-color-hue: $debug-column-color-hue + 12;
	@if $debug-column-color-hue > 360 {
		$debug-column-color-hue: $debug-column-color-hue - 360;
		$debug-column-color-saturation: $debug-column-color-saturation + 5%;
		@if $debug-column-color-saturation > 100% {
			$debug-column-color-saturation: 25%; 
			$debug-column-color-lightness: $debug-column-color-lightness + 10%;
			@if $debug-column-color-lightness > 100% {
				$debug-column-color-lightness: 50%;
			}
		}
	}

	@return $debug-column-color;
}

@mixin debug-colors {
	@if $grid-debug {
		$number-of-properties: length($debug-properties-to-color);
		$counter: 0;
		@each $property-to-color in $debug-properties-to-color {
			#{$property-to-color}: debug-generate-random-color(
				abs(360 / $number-of-properties * $counter),
				abs(100% / $number-of-properties * $counter),
				abs(100% / $number-of-properties * $counter));

			$counter: $counter + 1;
		}
	}
}

//@function debug-get-trace-level-value
//This function returns a value for the trace level.
//	(1) none (2) information (3) warning (4) error
//
//$trace-level: The trace level to convert to a value.
//
//TODO: [ ] Include the reference to the errors.
//TODO: [ ] Activate the debug-trace line after the function is tested. ;)
@function debug-get-trace-level-value($trace-level) {
	$trace-level-index: 1;
	@each $trace-level-item in $debug-trace-levels {
		@if $trace-level-item == $trace-level {
			@return $trace-level-index;
		}
	
		//Increment the counter.
		$trace-level-index: $trace-level-index + 1;
	}

	//Lets warn for the error.
	@warn "The trace level #{$trace-level} does not exist.";
	//Activate this line after the function is tested. ;)
	//debug-trace("@function debug-get-trace-level-value", "The trace level #{$trace-level} does not exist.", error, "");

	//Return an invalid trace level value.
	@return 0;
}

//@mixin debug-trace
//This function writes a message to the output of Sass so that the user gets debug information.
//
//$context:			Indicates the context of execution, normally the name of the mixin or function.
//
//$message:			Message that will be written to the output. It can be a list of messages.
//
//$message-type:		Indicates the type of message to be passed.
//	information (default): Simple information that might be useful to understand the calculations.
//							It is outputed as @debug for the Sass compiler.
//	warning:		It is a message that the user must pay attention, unwanted behaviour might occur.
//					It is outputed as @warn for the Sass compiler.
//	error:			There is a error that must be corrected in order for the proper functionality of the grid.
//					It is outputed as @warn for the Sass compiler.
//
//$href:			Reference to the documentation about the error. Normally is a link.
@function debug-trace($context, $message, $message-type: information, $href: "") {
	$trace-level: if($grid-debug, $gridgs-debug-minimum-trace-level-in-debug, $gridgs-debug-minimum-trace-level);

	//Lets verify if the trace is on for this context.
	@if $trace-level != off {
		
		//We only trace if the minimum level was reached.
		@if debug-get-trace-level-value($message-type) >= debug-get-trace-level-value($trace-level) {

			//Prepare message to send.
			$trace-message: "#{$message-type} [#{$context}] : #{$message} #{$href}";

			@if $message-type == information { @debug $trace-message; }
			@else { @warn $trace-message; }
		}
	}

	@return nothing;
}

//@mixin debug-assert
//This function writes a message to the output of Sass so that the user gets debug information.
//
//$condition:		The message is only written if the condition retuns true.
//
//other parameters:	See debug-trace documentation.
@mixin debug-assert($condition, $context, $message, $message-type: information, $href: "") {
	//Only writes if the condition is asserted.
	@if $condition {
		@include debug-trace($context, $message, $message-type, $href);
	}
}

// The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix() {
	*zoom:1;

	&:before,
	&:after {
	    content:"";
	    display:table;
	}
	&:after {
	    clear:both;
	}
}

//@function convert-to-media-queries-em($value-to-convert)
//Converts the value to media query ems, that means that is referenced over the browser base font value.
//
//	$value-to-convert:	Value that you want to convert.
//						Ex: 480px.
//Note: Currently we only support convertions from px to ems.
@function convert-to-media-queries-ems($value-to-convert) {
	@if unit($value-to-convert) == "px" {
		@return ($value-to-convert / $unitgs-constants-browser-default-text-size * 1em);
	}
	
	//Trace and return error.
	$void: debug-trace("@function convert-to-media-queries-em", "Currently we only support convertions from px to em.", error, "");
	@return 0;
}

//TODO: [ ] Bug - If the margin-top is already set, setting the $margin-top: 0; does not change the value back.

//TODO: [ ] On top of each function put only a reference to the documentation
//			So that we dont have to maintain the documentation in two places.
//TODO: [ ] Create a function that will recalculate all the settings values.
//			That function will be called in the settings setters so that all the
//			settings are mantained co
//TODO: [ ] allow setting the parameter in the mixin values without "" ex: left.
//TODO: [ ] Verify all the parameters that have variables as their default values
//			because it compiles correctly even if the variable does not exist.
//TODO: [ ] Verificar a unidade (ems, px, etc.) para garantir que apenas estao
//			a ser passadas unidades que sao suportadas pela grid.
//TODO: [ ] Permitir a utilizacao de outras unidades nos parametros ems, px, etc.
//
// Important numbers
//

//TODO: [ ] Criar a possibilidade de alinhar uma coluna ao fundo do ecran para paginas com pouco conteudo.

//Constants

//Note: This is not a absolute value, but an assumgtion that the user did not change their browser settings.
//		Although it is not important since we are in the relative world of a fluid and responsive grid.
$unitgs-constants-browser-default-text-size: 16;

//Grid Settings

$unitgs-settings-number-of-columns: 25 !default;
$unitgs-settings-number-of-active-columns: 24 !default;
$unitgs-settings-base-font-size: $unitgs-constants-browser-default-text-size !default;
$unitgs-settings-base-line-ratio: 1.5 !default;
$unitgs-settings-base-gutter-ratio: 1 !default;
$unitgs-settings-use-last-right-margins: true !default; 
$unitgs-settings-use-clear: true !default;

//Dont set this property directly use the function set-scale();
$unitgs-grid-units-current-scale: 1 !default;

//Calculated settings
$unitgs-settings-base-line-height: $unitgs-settings-base-font-size * $unitgs-settings-base-line-ratio;
$unitgs-grid-column-size: 100% / $unitgs-settings-number-of-columns;
$unitgs-grid-units-to-body-ems-ratio: $unitgs-settings-base-font-size / $unitgs-constants-browser-default-text-size;

//grid-line mixin defaults.
//Unless the relation is broken, this settings will be inherited by the grid-unit defaults.
$unitgs-settings-grid-line-default-font-size: 1 !default;
$unitgs-settings-grid-line-default-fit-method: nearest !default;
//Dont set this default, it is set by the grid settings.
$unitgs-settings-grid-line-default-line-height: $unitgs-settings-base-line-ratio;
$unitgs-settings-grid-line-default-padding-top: 0 !default;
$unitgs-settings-grid-line-default-padding-bottom: 0 !default;
$unitgs-settings-grid-line-default-margin-top: 0 !default;
$unitgs-settings-grid-line-default-margin-bottom: 0 !default;
$unitgs-settings-grid-line-default-height: 0 !default;

//setting $unitgs-settings-grid-unit-width-resolution-mode
//This setting will change the width calculation type
//	absolute:	(default) All the dimensions are given in global grid units.
//				This is the default mode because in the unitgs all the units are given in absolute values.
//				In this mode, only two dimensions are necessary to set the width of any container level.
//				Ex: 1/3 1/6 -		means that the current grid unit is contained in a 1/3 width container
//									and that its width is 1/6 of the global grid.
//	relative:	All dimensions are relative to the previous, starting with the first that is relative to
//				number of active columns. In this mode is necessary to insert the dimentions of as many
//				nested levels the current context is.
//				Ex: 1/3 1/2 1/4 -	means 1/3 of the grid then 1/2 of the container and then 1/4 of the
//									container of the container, resulting in a 1/24 that would mean
//									1 column of a grid with 24 active columns.
$unitgs-settings-grid-unit-width-resolution-mode: absolute !default;

//grid-unit mixin defaults.
$unitgs-settings-grid-unit-default-width: 0 !default;
$unitgs-settings-grid-unit-default-position: first !default;
$unitgs-settings-grid-unit-default-margin-right: 0 !default;
$unitgs-settings-grid-unit-default-margin-left: 0 !default;
$unitgs-settings-grid-unit-default-container-type: none !default;
//Dont set this default, it is set by the grid settings.
$unitgs-settings-grid-unit-default-container-width: $unitgs-settings-number-of-active-columns;
$unitgs-settings-grid-unit-default-align: left !default;
$unitgs-settings-grid-unit-default-gutter: both !default;
//To maintain coherence change this values in the grid-line default values.
//If you are sure that you want two different behaviours, you can set them directly
//and break the relationship.
$unitgs-settings-grid-unit-default-margin-top: $unitgs-settings-grid-line-default-margin-top !default;
$unitgs-settings-grid-unit-default-margin-bottom: $unitgs-settings-grid-line-default-margin-bottom !default;
$unitgs-settings-grid-unit-default-font-size: $unitgs-settings-grid-line-default-font-size !default;
$unitgs-settings-grid-unit-default-fit-method: $unitgs-settings-grid-line-default-fit-method !default;
//Dont set this default, it is set by the grid settings.
$unitgs-settings-grid-unit-default-line-height: $unitgs-settings-grid-line-default-line-height !default;
$unitgs-settings-grid-unit-default-padding-top: $unitgs-settings-grid-line-default-padding-top !default;
$unitgs-settings-grid-unit-default-padding-bottom: $unitgs-settings-grid-line-default-padding-bottom !default;
$unitgs-settings-grid-unit-default-height: $unitgs-settings-grid-line-default-height !default;

//@debug "unitgs-grid-units-to-body-ems-ratio: " + $unitgs-grid-units-to-body-ems-ratio;

//@mixin unitgs-set-grid-settings
//This function is used to set the grid-settings. You should NOT set the settings directly, if you do
//you run the risk of getting dependent settings into an unstable state.
//
//	$number-of-columns:			Defines the number of total columns of the grid.
//								Default value: $unitgs-settings-number-of-columns.
//
//	$number-of-active-columns:	Defines the number of active columns for the grid.
//								Default value: $unitgs-settings-number-of-active-columns,
//
//	$font-size:					Base font-size, by wich all the other values will relate to.
//								Default value: $unitgs-settings-base-font-size,
//
//	$line-height:					Defines the ratio between the font-size and the line.
//								Default value: $unitgs-settings-base-line-ratio
//
//	$gutter-ratio:				Defines the size of the gutter relative to the line-height.
//								The gutter is devided by the left and right padding.
//								Default value: $unitgs-settings-base-gutter-ratio that by default
//											   is one (line height).
//
//	$use-last-right-margins:		Indicates if the last column uses a margin.
//								Default value: $unitgs-settings-use-last-right-margins,
//
//	$use-clear:					Indicates if the design uses the clear on the first and fullrow columns.
//								Default value: $unitgs-settings-use-clear
@mixin unitgs-set-grid-settings(
	$number-of-columns: $unitgs-settings-number-of-columns,
	$number-of-active-columns: $unitgs-settings-number-of-active-columns,
	$font-size: $unitgs-settings-base-font-size,
	$line-height: $unitgs-settings-base-line-ratio,
	$gutter-ratio: $unitgs-settings-base-gutter-ratio,
	$use-last-right-margins: $unitgs-settings-use-last-right-margins,
	$use-clear: $unitgs-settings-use-clear
) {
	//Set Grid Settings.
	$unitgs-settings-number-of-columns: $number-of-columns;
	$unitgs-settings-number-of-active-columns: $number-of-active-columns;
	$unitgs-settings-base-font-size: $font-size;
	$unitgs-settings-base-line-ratio: $line-height;
	$unitgs-settings-base-gutter-ratio: $gutter-ratio;
	$unitgs-settings-use-last-right-margins: $use-last-right-margins;
	$unitgs-settings-use-clear: $use-clear;

	//Recalculate Dependent Settings
	//TODO: [X] I would like to remove this variable from the grid, because I dont want pixel values in my calculations.
	//$unitgs-settings-base-line-height: $unitgs-settings-base-font-size * $unitgs-settings-base-line-ratio;
	$unitgs-grid-column-size: 100% / $unitgs-settings-number-of-columns;
	$unitgs-grid-units-to-body-ems-ratio: $unitgs-settings-base-font-size / $unitgs-constants-browser-default-text-size;

	//Set related default values.
	$unitgs-settings-grid-line-default-line-height: $unitgs-settings-base-line-ratio;
	$unitgs-settings-grid-unit-default-container-width: $unitgs-settings-number-of-active-columns;
	$unitgs-settings-grid-unit-default-line-height: $unitgs-settings-grid-line-default-line-height;

	$void: debug-trace("@mixin unitgs-set-grid-settings",
		"$unitgs-settings-number-of-columns: #{$unitgs-settings-number-of-columns}"
		"$unitgs-settings-number-of-active-columns: #{$unitgs-settings-number-of-active-columns}"
		"$unitgs-settings-base-font-size: #{$unitgs-settings-base-font-size}"
		"$unitgs-settings-base-line-ratio: #{$unitgs-settings-base-line-ratio}"
		"$unitgs-settings-base-gutter-ratio: #{$unitgs-settings-base-gutter-ratio}"
		"$unitgs-settings-use-last-right-margins: #{$unitgs-settings-use-last-right-margins}"
		"$unitgs-settings-use-clear: #{$unitgs-settings-use-clear}"
		"$unitgs-grid-column-size: #{$unitgs-grid-column-size}"
		"$unitgs-grid-units-to-body-ems-ratio: #{$unitgs-grid-units-to-body-ems-ratio}",
		information, "");
}

//@mixin unitgs-set-grid-scale
//
//$scale:	Defines the scale over wich you want to start working with the grid.
//			For example, in a mobile first scenario, you probably want to have a
//			grid scale for that size and other scales to higher dimensions.
//			To be applied only to the base container of the grid, normally the body.
@mixin unitgs-set-grid-scale($scale: 1) {
	$unitgs-grid-units-current-scale: $scale;

	font-size: #{$unitgs-grid-units-to-body-ems-ratio * $scale}em;

	$void: debug-trace("@mixin unitgs-set-grid-scale",
		"Setting $scale to #{$scale}"
		"font-size: #{$unitgs-grid-units-to-body-ems-ratio * $scale}em",
		information, "");
}

//@mixin unitgs-set-grid-base-definitions
//This mixin sets the grid base definitions to the base container.
//It sets base font-size reference and the line-height for the vertical rythm.
//normally to be applied to the body element of a page.
//Note: Apply before start using the grid.
//
//$scale:	Defines the scale over wich you want to start working with the grid.
//			For example, in a mobile first scenario, you probably want to have a
//			grid scale for that size and other scales to higher dimensions.
@mixin unitgs-init-grid($scale: 1) {

	/*
	*
	*  Margin, padding, and border resets
	*  except for form elements
	*
	*/

//	html, body, div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, a, blockquote, pre, abbr, address, cite, code, del, dfn, em, img, ins, kbd, q, samp, small, strong, sub, sup, var, b, i, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, figure, footer, header, hgroup, nav, section, menu, time, mark, audio, video, canvas {
//		margin: 0;
//		padding: 0;
//		border: 0;
//	}
//
//	/*
//	*
//	*  Consistency fixes
//	*  adopted from http://necolas.github.com/normalize.css/
//	*
//	*/
//
//	html {
//		height: 100%;
//		-webkit-text-size-adjust: 100%;
//		-ms-text-size-adjust: 100%;
//	}
//	body {
//		min-height: 100%;
//		font-size: 100%;
//	}



	/*
	*
	*	Zoomable baseline grid
	*	type size presets
	*
	*/

	@include unitgs-set-grid-scale($scale);
	line-height: #{$unitgs-settings-base-line-ratio}em;

	$void: debug-trace("@mixin unitgs-init-grid",
		"Setting $scale to #{$scale}"
		"line-height: #{$unitgs-settings-base-line-ratio}em",
		information, "");
}

//@function grid-fractions-to-columns
//This function is what allows the user to define the size of the columns in a much more natural
//and scalable way, like "I want a column that occupies 2/3 of the space.
//This is very important because allow us to focus on porpotions and not on number of columns.
//Returns the number of active columns that correspond to the fraction.
//
//$grid-fraction: The fraction of the grid that we want the column to be.
//	If the value is not less than 1, it returns the same value.
//	The fraction needs to give a whole value, if not it will send an error.
//
//$number-of-columns:	The number of columns of the current context.
//						You only have to set this for nested grids.
//		Default: $number-of-active-columns
//@function grid-fractions-to-columns($grid-fraction, $number-of-columns: $unitgs-settings-number-of-active-columns) {
//	
//	@if $grid-fraction >= 1 {
//		@return $grid-fraction;
//	}
//
//	$columns-from-fraction: $number-of-columns * $grid-fraction;
//
//	//The fraction needs to give a whole value.
//	@if ($columns-from-fraction % 1) != 0 {
//		$void: debug-trace("@function grid-fractions-to-columns", "#{$number-of-columns} * #{$grid-fraction} does not give a whole value.", error);
//		//Lets return a value that turns the error very visible.
//		$columns-from-fraction: 0;
//	}
//
//	//Lets return the number of columns.
//	@return $columns-from-fraction;
//}

@function grid-fractions-to-columns-absolute(
	$grid-fractions,
	$number-of-columns: $unitgs-settings-number-of-active-columns,
	$start: 1,
	$end: length($grid-fractions)
	) {

	//If the value to calculate is zero we can return it immediatly.
	@if $grid-fractions == 0 { @return 0; }

	//Verify if the number of width elements is not bigger than 2.
	@if type-of($grid-fractions) == list and length($grid-fractions) > 2 {
		$void: debug-trace("@function grid-fractions-to-columns-absolute", "In absolute mode you can only specify o maximum of 2 widths for the lenght of the grid unit, the first element is the absolute value of the container and the second, the width of the contained. Current lenght is: (#{length($grid-fractions)}).", error, "");
		@return 0;
	}

	//This happens when there are no parameters or there is no parent and we are trying to retrieve its value.
	@if $start > $end { @return $number-of-columns;	}

	//Correct and inform a possible error in the end value.
	@if $end > length($grid-fractions) {
		$void: debug-trace("@function grid-fractions-to-columns-absolute", "The $end parameter has a value (#{$end}) that is bigger than the list lenght (#{length($grid-fractions)}).", warning, "");
		$end: length($grid-fractions);
	}

	//In absolute mode we just need the end value to calculate the number of columns.
	$current-item: nth($grid-fractions, $end);

	//If the current item is a list.
	@if type-of($current-item) == list {
		//Trace error and return error.
		$void: debug-trace("@function grid-fractions-to-columns-absolute", "In absolute mode me dont allow nested lists.", error, "");
		$number-of-columns: 0;
	//If it has the wildcard character.
	} @else if $current-item == "*" or $current-item == fullrow {
		//Returns the number of columns.
		$number-of-columns: $number-of-columns;
	//If the value is <= 0
	} @else if $current-item <= 0 {
		//Trace error and return error.
		$void: debug-trace("@function grid-fractions-to-columns-absolute", "Number of columns cannot be less or equal to zero. $current-item: #{$current-item}", error, "");
		$number-of-columns: 0;
	//If it has a number >= 1
	} @else if $current-item >= 1 {
		//If it is not a whole number.
		@if ($current-item % 1) != 0 {
			//Trace the error and return error.
			$void: debug-trace("@function grid-fractions-to-columns-absolute", "Any number above or equal to one must be a whole number because it represents the absolute number of columns. You passed #{$current-item}.", error, "");
			$number-of-columns: 0;
		}
		@else {
			//Returns the current item
			$number-of-columns: $current-item;
		}
	//Else, lets calculate the fraction.
	} @else {
		//Calculate the fraction
		$number-of-columns-from-fraction: $number-of-columns * $current-item;

		//The fraction needs to give a whole value.
		@if ($number-of-columns-from-fraction % 1) != 0 {
			//Trace and return error.
			$void: debug-trace("@function grid-fractions-to-columns-absolute", "#{$number-of-columns} * #{$current-item} = #{$number-of-columns-from-fraction}, not a whole number of columns.", error, "");
			$number-of-columns: 0;
		} @else {
			$number-of-columns: $number-of-columns-from-fraction;
		}
	}

	//Lets return the number of columns.
	@return $number-of-columns;
}

@function grid-fractions-to-columns-relative(
	$grid-fractions, $number-of-columns: $unitgs-settings-number-of-active-columns,
	$start: 1,
	$end: length($grid-fractions)) {
	
	//If the value to calculate is zero we can return it immediatly.
	@if $grid-fractions == 0 { @return 0; }

	//If trying to get the container columns.
	@if $start > $end { @return $number-of-columns;	}

	//Correct and inform a possible error in the end value.
	@if $end > length($grid-fractions) {
		$void: debug-trace("@function grid-fractions-to-columns-relative", "The $end parameter has a value (#{$end}) that is bigger than the list lenght (#{length($grid-fractions)}).", warning, "");
		$end: length($grid-fractions);
	}

	//Go through the list values.
	@for $i from $start through $end {
	
		$current-item: nth($grid-fractions, $i);

		//If the current item is a list.
		@if type-of($current-item) == list {
			//Call itself recursively.
			$number-of-columns: grid-fractions-to-columns-relative($current-item, $number-of-columns);
		//If it has the wildcard character.
		} @else if $current-item == "*" or $current-item == fullrow {
			//Returns the number of columns.
			$number-of-columns: $number-of-columns;
		//If the value is <= 0
		} @else if $current-item <= 0 {
			//Trace error and return error.
			$void: debug-trace("@function grid-fractions-to-columns-relative", "Number of columns cannot be less or equal to zero. $current-item: #{$current-item}", error, "");
			$number-of-columns: 0;
		//If it has a number >= 1
		} @else if $current-item >= 1 {
			//If it is not a whole number.
			@if ($current-item % 1) != 0 {
				//Trace the error and return error.
				$void: debug-trace("@function grid-fractions-to-columns-relative", "Any number above or equal to one must be a whole number because it represents the absolute number of columns. You passed #{$current-item}.", error, "");
				$number-of-columns: 0;
			}
			@else {
				//Returns the current item
				$number-of-columns: $current-item;
			}
		//Else, lets calculate the fraction.
		} @else {
			//Calculate the fraction
			$number-of-columns-from-fraction: $number-of-columns * $current-item;

			//The fraction needs to give a whole value.
			@if ($number-of-columns-from-fraction % 1) != 0 {
				//Trace and return error.
				$void: debug-trace("@function grid-fractions-to-columns-relative", "#{$number-of-columns} * #{$current-item} = #{$number-of-columns-from-fraction}, not a whole number of columns.", error, "");
				$number-of-columns: 0;
			} @else {
				$number-of-columns: $number-of-columns-from-fraction;
			}
		}

		//If the number of columns is zero is because we have some error and we will return.
		@if $number-of-columns == 0 {
			@return 0;
		}
	}

	//Lets return the number of columns.
	@return $number-of-columns;
}

@function grid-fractions-to-columns(
	$grid-fractions,
	$number-of-columns: $unitgs-settings-number-of-active-columns,
	$start: 1,
	$end: length($grid-fractions)
	) {
	
	@if $unitgs-settings-grid-unit-width-resolution-mode == absolute {
		@return grid-fractions-to-columns-absolute($grid-fractions, $unitgs-settings-number-of-active-columns, $start, $end);
	} @else {
		@return grid-fractions-to-columns-relative($grid-fractions, $number-of-columns, $start, $end);	
	}
}

@function utils-calculate-gutter-width-in-ems($font-size: 1)
{
	$dimensions-ratio: calculate-dimensions-ratio($font-size);
	@return $unitgs-settings-base-line-ratio * $unitgs-settings-base-gutter-ratio * $dimensions-ratio / 2 * 1em;
}

//@function utils-units-convert-to-ems
//This function converts the pixels to ems.
//
//$number-of-pixels:		Number of pixels to convert to ems.
//
//$font-size:			The context to where you want to convert to ems.
@function utils-units-convert-to-ems($number-of-pixels, $font-size: 1)
{
	$number-of-pixels: $number-of-pixels / 1px;

	$dimensions-ratio: calculate-dimensions-ratio($font-size);
	@return $number-of-pixels / (($unitgs-grid-units-to-body-ems-ratio * $unitgs-grid-units-current-scale) * $dimensions-ratio) / $unitgs-constants-browser-default-text-size * 1em;
}

//@function calculate-container-ratios
//This function converts the global units passed as parameter
//to the relative size of the contained column.
//This function is very importante when we have nested containers
//(any dom object that sets the font-size) that will change its
//children absolute size.
//The Unit Grid System uses this function so that the user can continue to
//set the font-sizes in absolute (relative to body) units without the need
//to be making complex calculations.
//Parameters:
//	$font-sizes: the pretended font size for the grid column.
//		If the container is also contained then for correct calculations
//		you need to pass the list of all the font-size changes
//		of the parents with exception of the body.
//		Ex: calculate-font-size(1.5)
//			Just sets the font-size to 1.5 relative to the body.
//		Ex: calculate-font-size(1.5 1)
//			Sets the font-size to 1 (like the body size),
//			but applying the correct ratio to correct the parent
//			size.
//		Note: The last font in the list is the one that we want to set.
//
//	$value-to-return:
//		if "dimensions-ratio" then it will return the dimensions ratio
//			for that container.
//		otherwise returns the font-size to apply to the container.
//
//TODO: [ ] Check if we want to pass values in pixels and if it is really working
//			the conversion of the units.
@function calculate-container-ratios($font-sizes, $value-to-return: dimensions-ratio)
{
	//Base values.
	$current-dimensions-ratio: 1;
	$current-font-size: 1;

	//Vamos percorrer a lista a calcular os ratios.
	@each $font-size in $font-sizes {
		//If the unit is px, we are going to convert it to ems.
		//@if unit($font-size) == "px" {
		//	$font-size: utils-units-convert-to-ems($font-size);
		//}

		//First I calculate the new applied font because it will influence the calculation of the ratio.
		$current-font-size: $font-size * $current-dimensions-ratio;
		$current-dimensions-ratio: $current-dimensions-ratio / $current-font-size;
	}

	//Valor devolver o valor pretendido.
	@return if($value-to-return == dimensions-ratio, $current-dimensions-ratio, $current-font-size);
}

//@function calculate-font-size - Helper function
//See documentation of the function "calculate-container-ratios".
@function calculate-font-size($font-sizes)
{
	@return calculate-container-ratios($font-sizes, $value-to-return: font-size);
}

//@function calculate-dimensions-ratio - Helper function
//See documentation of the function "calculate-container-ratios".
@function calculate-dimensions-ratio($font-sizes)
{
	@return calculate-container-ratios($font-sizes, $value-to-return: dimensions-ratio);
}

//@function adjust-line-height-ratio
//Verifies if the line-height needs to be corrected and corrects it.
//
//$font-sizes:
//
//TODO: [ ] Verify where this function is used. - only on the grid, so, I think we will be able to remove it.
//TODO: [ ] Verify if it makes sense to pass a list of sizes.
//TODO: [ ] This function does not make any sense, verify urgent.
//@function adjust-line-height-ratio($font-sizes)
//{
//	//Lets get the last font-size in the list, lists in sass are 1 based.
//	$wanted-font-size: nth($font-sizes, length($font-sizes));
//
//	//Lets ceil the new font-size.
//	$adjusted-size: ceil($wanted-font-size);
//
//	//if $wanted-font-size is for 1 then the $adjusted-size is for x
//	$new-line-height-ratio: $adjusted-size / $wanted-font-size * $unitgs-settings-base-line-ratio;
//
//	//Lets return the new line-height related with the new size.
//	@return $new-line-height-ratio;
//}

//@mixin grid-unit
//$width: ($number-of-active-columns) Indicates the size of the column in columns.
//
//$position: Defines the position in the current row.
//	"fullrow": Indicates that will occupy oll the rom.
//	"first": (default) It is the first column in the row.
//	"middle": It is the a middle column in the row.
//	"last": It is the last column in the row.
//
//$margin-top: (0) Number of lines as a top margin.
//
//$margin-right: (0) Number of columns as a right margin.
//
//$margin-bottom: (0) Number of lines as a bottom margin.
//
//$margin-left: (0) Number of columns as a left margin.
//
//$container-type: Defines if it is a top level column or a nested column.
//	none:		(default) Indicates that it is a top level column that will not serve as a container.
//	container:	Indicates that this column is a container for nested columns.
//	contained:	Indicates that this column is included in another column.
//	both:		Indicates that this column is included in another column and is a container for other columns.
//
//$container-grid-columns: Number of grid columns of the parent column.
//	Atention: If you use a fraction value, it will refer to the active grid columns and not the parent.
//
//$font-size: Defines the absolute font-size pretended for the current container.
//			  TODO [ ] : Make a full explanation of what it does and should be used.
//
//$gutter:	Defines where we want the gutters.
//			Note: It only applies for container-type none or contained.
//				none:	Removes the gutters.
//				left:	Set only the left gutter.
//				right:	Set only the right gutter.
//				both:	(default) Sets both gutters.
//Note:
//	The parameters: $width, $margin-left, $margin-right and $parent-columns can be set by fraction of the grid.
//	Good values for the 24 grid system:
//       1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23
//		                                            1/2
//		                            1/3                             2/3
//		                    1/4                                             3/4
//		            1/6                                                             5/6
//		    1/12                            5/12            7/12                            11/12
//		1/24    3/24    5/24    7/24    9/24   11/24   13/24   15/24   17/24   19/24   21/24    23/24
//TODO [] : Create padding-left and padding right | and padding-top and padding-bottom using the grid-line functions.
//			This is important because of the gutters calculations.
//TODO [] : Allow to pass other units to the grid parameters and make the conversions automatically.
//TODO [] : Include documentation to all the parameters.
//TODO: [ ] Call the grid-line to set the font-size, height, margin-top and margin-bottom parameters.
@mixin grid-unit(
	$width: default,
	$position: default,
	$margin-top: default,
	$margin-right: default,
	$margin-bottom: default,
	$margin-left: default,
	$container-type: default,
	//$container-width: default,
	$align: default,
	$font-size: default,
	$fit-method: default,
	$line-height: default,
	$padding-top: default,
	$padding-bottom: default,
	$height: default,
	$gutter: default,
	$single-line-vertical-align: default
	) {

	//Lets convert the defaults in real values.
	$position:			if($position == default, $unitgs-settings-grid-unit-default-position, $position);
	$margin-top:		if($margin-top == default, $unitgs-settings-grid-unit-default-margin-top, $margin-top);
	$margin-right:		if($margin-right == default, $unitgs-settings-grid-unit-default-margin-right, $margin-right);
	$margin-bottom:		if($margin-bottom == default, $unitgs-settings-grid-unit-default-margin-bottom, $margin-bottom);
	$margin-left:		if($margin-left == default, $unitgs-settings-grid-unit-default-margin-left, $margin-left);
	$container-type:	if($container-type == default, $unitgs-settings-grid-unit-default-container-type, $container-type);
	//$container-width:	if($container-width == default, $unitgs-settings-grid-unit-default-container-width, $container-width);
	$align:				if($align == default, $unitgs-settings-grid-unit-default-align, $align);
	$font-size:			if($font-size == default, $unitgs-settings-grid-unit-default-font-size, $font-size);
	$fit-method:		if($fit-method == default, $unitgs-settings-grid-unit-default-fit-method, $fit-method);
	$line-height:		if($line-height == default, $unitgs-settings-grid-unit-default-line-height, $line-height);
	$padding-top:		if($padding-top == default, $unitgs-settings-grid-unit-default-padding-top, $padding-top);
	$padding-bottom:	if($padding-bottom == default, $unitgs-settings-grid-unit-default-padding-bottom, $padding-bottom);
	$height:			if($height == default, $unitgs-settings-grid-unit-default-height, $height);
	$gutter:			if($gutter == default, $unitgs-settings-grid-unit-default-gutter, $gutter);

	//Dummy declaration.
	$container-width: default;

	//If the width was not set by the user.
	@if $width == default {
		//The container have the whole available space.
		$container-width: $unitgs-settings-number-of-active-columns;
		$margin-left: grid-fractions-to-columns($margin-left, $container-width);
		$margin-right: grid-fractions-to-columns($margin-right, $container-width);
		$width: $container-width - $margin-left - $margin-right;
	//If the width was set by the user.
	} @else {
		//If the width specifies more than one dimension we know that is contained.
		@if type-of($width) == list and length($width) > 1 {
			@if $container-type == none { $container-type: contained; }
			@else if $container-type == container { $container-type: both; }
		}

		//Resolve fraction parameters.
		$container-width: grid-fractions-to-columns($width, $unitgs-settings-number-of-active-columns, $end: length($width) - 1);
		$width: grid-fractions-to-columns($width, $unitgs-settings-number-of-active-columns);
		$margin-left: grid-fractions-to-columns($margin-left, $container-width);
		$margin-right: grid-fractions-to-columns($margin-right, $container-width);
	}

	//Set line related properties.
	@include grid-line($font-size: $font-size, $fit-method: $fit-method, $line-height: $line-height,
		$padding-top: $padding-top, $padding-bottom: $padding-bottom, $margin-top: $margin-top,
		$margin-bottom: $margin-bottom, $height: $height, $single-line-vertical-align: $single-line-vertical-align);

	//Se o numero de colunas completar o numero de colunas activas.
	@if ($width + $margin-left + $margin-right) >= $container-width {
		//Podemos considerar que e fullrow.
		$position: fullrow;
	}

	//Default value.
	$column-size: $unitgs-grid-column-size;

	//Vamos calcular o tamanho de uma coluna.
	@if $container-type == contained or $container-type == both {
		$column-size: 100% / $container-width;
	}

	//Finalmente vamos definir o tamanho da coluna.
	width: $column-size * $width;

	//Initial value.
	$column-margin-left: 0;

	//Se for a primeira columa ou fullrow e for uma coluna de topo vamos adicionar the inactive columns margin.
	@if ($container-type == none or $container-type == container)
	    and ($position == first or $position == fullrow) {
		//Vamos adicionar a margem da grid e as colunas inactivas.
		$column-margin-left: $column-size * (($unitgs-settings-number-of-columns - $unitgs-settings-number-of-active-columns) / 2);
	}

	//Colunas Margin do lado esquerdo
	$column-margin-left: $column-margin-left + $column-size * $margin-left;

	//Initial value.
	$column-margin-right: 0;

	//As margens direitas apenas sao utilizadas se for explicitamente indicado.
	@if $unitgs-settings-use-last-right-margins == true {
		//Se for a ultima columa ou fullrow e for uma coluna de topo vamos adicionar the inactive columns margin.
		@if ($container-type == none or $container-type == container)
			and ($position == last or $position == fullrow) {
			//Vamos adicionar a margem da grid e as colunas inactivas.
			$column-margin-right: $column-size * (($unitgs-settings-number-of-columns - $unitgs-settings-number-of-active-columns) / 2);
		}
	}

	//Margin da grid do lado direito
	$column-margin-right: $column-margin-right + $column-size * $margin-right;

	//Vamos definir as margens.
	margin-left: $column-margin-left;
	margin-right: $column-margin-right;
	
	//Vamos posicionar a coluna.
	@if $align == left { float: left; }
	@else { float: right; }

	//Apenas as colunas que nao sao containers tem os paddings da grid.
	@if $container-type == none or $container-type == contained {
		//Default dimensions ratio.
		$dimensions-ratio: 1;
		//TODO [ ] : check how the array comparissons are performed.
		//If it was defined a new font-size to the current container
		@if $font-size != 1 {
			//Lets calculate the dimentions ratio to be applied to relative sized elements.
			$dimensions-ratio: calculate-dimensions-ratio($font-size);
		}

		//Vamos adicionar a margem dentro da coluna, as dimensoes da margem nao alteram com a fonte aplicada.
		//Provavelmente quem tem de tratar destas contas e a grid-line.
		
		padding-left: #{if($gutter == both or $gutter == left, 
			$unitgs-settings-base-line-ratio * $unitgs-settings-base-gutter-ratio * $dimensions-ratio / 2, 0)}em;
		padding-right: #{if($gutter == both or $gutter == right, 
			$unitgs-settings-base-line-ratio * $unitgs-settings-base-gutter-ratio * $dimensions-ratio / 2, 0)}em;

		//Set box sizing to border-box
		-webkit-box-sizing: border-box;
		   -moz-box-sizing: border-box;
		    -ms-box-sizing: border-box;
		     -o-box-sizing: border-box;
		        box-sizing: border-box;
	}

	//TODO: Understand better what, how and when the clear makes sense to be used.
	// A propriedade $unitgs-settings-use-clear ja nao faz sentido pois nao a estamos a utilizar.
	//TODO: Fix, because the first page of my site gets a problem with the image and the text.
	//But this functionality is very important to fix jagged columns.
	//Ex: The left column is longer than the right, the browser tries to align with it.
	//TODO: Check if we have any way to allow the columns to fit in one another.
	//		I think it is possible but only with contained columns.
	@if $unitgs-settings-use-clear == true {
		//Caso seja a primeira coluna, vamos garantir que nao temos nada do lado esquerdo.
		@if $position == first { clear: left; }
		//If it is a full row, vamos pedir que nao tenha nada de um lado e do outro.
		@else if $position == fullrow { clear: both; }
		//Caso contrario faz reset ao clear.
		@else { clear: none; }
	}

	//Apply the clearfix and display type.
	@if $container-type == container or $container-type == both {
		display: block;
		@include clearfix();
	} @else {
		display: inline;
	}
}

//@mixin grid-line
//This function sets the properties for the grid line.
//
//	$font-size:					List of the font-sizes, the last font size is the one that we want,
//								relative to the $unitgs-settings-base-font-size.
//
//	$fit-method:				Defines the method used to decide the fit of the new font-size in the vertical rythm.
//		nearest (default):		If the line rounds do the nearest whole number. ex: 1.2 = 1, 1.5 = 2, 1.8 = 2.
//		ceil:					Always choose the next whole number. ex: 1.2 = 2, 1.5 = 2, 1.8 = 2.
//		floor:					Always choose the base whole number. ex: 1.2 = 1, 1.5 = 1, 1.8 = 1.
//								Note: nearest, ceil and floor use the line-height-ratio to calculate the line-height.
//		bestfit:				Ignores the ratio
//								Note: The bestfit, will get the bestfit of the font in the vertical rythm giving the minimum
//									leading space possible.
//
//	$line-height:				Allows to specify the ratio between the font-size and the line. By default it will use the
//								grid $unitgs-settings-base-line-ratio settings.
//
//	$padding-top:				Defines the top padding value. You can insert the value in ems or px. Default value is 0.
//								Note:	The sum of the top and bottom paddings values should be a multiple of the grid line.
//									If specified in unitless values it will be used the base line height as a base.
//									If it is in px will be absolute value.
//									If it is in ems or percentage it will be relative to the current line-height.
//
//	$padding-bottom:			Defines the bottom padding value. You can insert the value in ems or px. Default value is 0.
//								Note: See notes of the $padding-top.
//
//	$min-font-to-line-spacing:	Defines a minimum of extra space between the font and the line.
//								Note: The value is devided between the top and bottom.
//								Ex: 10% will force a min margin of 5% on the top and on the bottom.
//									wich what you probably want because with multiple lines, 5% of the bottom of the
//									first line + the 5% of the top of the second line, makes the desired 10% margin,
//									creating a good spacing.
//
//TODO: [X] Adicionar os parametros para os paddings.
//TODO: [X] Permitir definir o alinhento vertical do texto. - Not possible.
//TODO: [ ] Permitir definir um valor minimo de espacamento entre o texto e a linha.
//TODO: [ ] Apply the ratios over the values for the contained columns.
//TODO: [ ] Permitir passar valores em:
//		[ ]	gu - relativo ao tamanho ao $unitgs-settings-base-line-ratio.
//		[ ]	em - relativo ao tamanho da fonte.
//		[ ]	%  - relativo ao tamanho da linha.
//		[ ]	px - absoluto e convertido em ems.
//TODO: [ ] Remover a necessidade de passar as opcoes como texto.
//TODO: [ ] Permitir definir o fittype para o padding.
//TODO: [ ] Fazer backup do trabalho.
//TODO: [ ] Allow half-lines for smaller screens or tighter adjustments.
//		Ver se e mesmo necessario ter uma opcao para meias linhas, ou se basta alterar e ritmo
//		para metade do tamanho.
//TODO:	[ ]	Por todos os default parameter values as settings.
//TODO:	[ ]	Criar exemplos para todas as opcoes de todos os metodos.
//TODO:	[ ]	Corrigir a documentacao.
//TODO:	[ ]	Create a documentation with all the settings, constants, functions and mixins.
//			Get ideas from Compass and Sass documentation.
//TODO:	[ ]	Check compatibility with the browsers.
//TODO:	[ ]	Create better debug information with a setting to activate/deactivate.
//TODO:	[ ]	Make the grid generic removing the base-margin because it is not necessary.
//TODO:	[ ]	Create a prefix for the namespace of the grid system.
//TODO: [ ] Permitir definir o espaco minimo entre linhas - $min-font-to-line-spacing: 10%
//TODO: [ ] Include the margin-top and margin-bottom parameters.
//TODO: [ ] Include the height parameter.
//TODO: [ ] Verify if I declare two times the same styles if they are written two times also.
//
@mixin grid-line(
	$font-size: default,
	$fit-method: default,
	$line-height: default,
	$padding-top: default,
	$padding-bottom: default,
	$margin-top: default,
	$margin-bottom: default,
	$height: default,
	$single-line-vertical-align: default
	)
{
	//Lets convert the defaults in real values.
	$font-size:			if($font-size == default, $unitgs-settings-grid-line-default-font-size, $font-size);
	$fit-method:			if($fit-method == default, $unitgs-settings-grid-line-default-fit-method, $fit-method);
	$line-height:			if($line-height == default, $unitgs-settings-grid-line-default-line-height, $line-height);
	$padding-top:		if($padding-top == default, $unitgs-settings-grid-line-default-padding-top, $padding-top);
	$padding-bottom:		if($padding-bottom == default, $unitgs-settings-grid-line-default-padding-bottom, $padding-bottom);
	$margin-top:			if($margin-top == default, $unitgs-settings-grid-line-default-margin-top, $margin-top);
	$margin-bottom:		if($margin-bottom == default, $unitgs-settings-grid-line-default-margin-bottom, $margin-bottom);
	$height:			if($height == default, $unitgs-settings-grid-line-default-height, $height);

	//Unquote parameters.
	//$fit-method: unquote($fit-method);

	//Lets set the font-size.
	//TODO: Aplicar o ratio do container.
	font-size: calculate-font-size($font-size) * 1em;

	//Lets save only the last value.
	$font-size: nth($font-size, length($font-size));

	//It is the same as having a ratio of 1 and ceiling to the next whole value.
	@if $fit-method == bestfit {
		$line-height: 1;
		$fit-method: ceil;
	}

	//Vamos calcular o numero de linhas da grid sao necessarias para conter a nova fonte
	//com o ratio aplicado.
	//Ex: 0.8em * 0.8 / 1.6 = 0.4. O que significa que sao necessarias meia linha.
	$calculated-line-height: ($font-size * $line-height) / $unitgs-settings-base-line-ratio;

	//Vamos aplicar o metodo de arredondamento a linha definido pelo utilizador.
	@if $fit-method == nearest {
		//No exemplo de 0.4 arredonda para 0. (0.5 arredonda para 1).
		$calculated-line-height: round($calculated-line-height);
	} @else if $fit-method == ceil {
		//No exemplo de 0.4 arredonda para 1.
		$calculated-line-height: ceil($calculated-line-height);
	} @else if $fit-method == floor {
		//No exemplo de 0.4 arredonda para 0.
		$calculated-line-height: floor($calculated-line-height);
	}

	//Vamos aplicar o tamanho da linha para ter o tamanho real pretendido.
	$calculated-line-height: $calculated-line-height * $unitgs-settings-base-line-ratio;

	//Vamos salvaguardar para quando o resultado e inferior a tamanho de uma linha.
	//Ex: round(0.8em * 0.8 / 1.6) = 0
	@if $calculated-line-height < $unitgs-settings-base-line-ratio {
		//Vamos incrementar uma linha.
		$calculated-line-height: $calculated-line-height + $unitgs-settings-base-line-ratio;
	}

	//Save in case it is needed for single line vertical align.
	$number-of-base-lines-per-line: $calculated-line-height / $unitgs-settings-base-line-ratio;

	//Lets calculate the font-size in units relative to the font.
	$calculated-line-height: $calculated-line-height / $font-size;
	

	//Lets set the line-height.
	@if $single-line-vertical-align == default {
		line-height: $calculated-line-height;
	} @else {
		//Lets check if we are going to need to ignore a user parameter and trace it.
		@if $height != 0 and $height != $number-of-base-lines-per-line {
			$void: debug-trace("@mixin grid-line", "The parameter $height will be overriden to #{$number-of-base-lines-per-line} because you set the parameter $single-line-vertical-align.", warning, "");
		}

		//Exactly the size of the font.
		line-height: 1em;
		//Lets force that we will have only one line height.
		$height: $number-of-base-lines-per-line;
	}

	//Vamos somar os paddings.
	$paddings-total: $padding-top + $padding-bottom;
	//Se o total de paddings nao for multiplo das linhas.
	@if $paddings-total % 1 != 0 {
		//Vamos calcular o ratio de ajuste para cumprirem o ritmo vertical.
		$paddings-adjustment-ratio: ceil($paddings-total) / $paddings-total;
		//Vamos aplicar os ajustes.
		$padding-top: $padding-top * $paddings-adjustment-ratio;
		$padding-bottom: $padding-bottom * $paddings-adjustment-ratio;
	}

	$padding-top: $padding-top * $unitgs-settings-base-line-ratio / $font-size * 1em;
	$padding-bottom: $padding-bottom * $unitgs-settings-base-line-ratio / $font-size * 1em;

	@if $single-line-vertical-align != default {
		$padding-top: $padding-top + ($calculated-line-height - 1) * $single-line-vertical-align;
		$padding-bottom: $padding-bottom + ($calculated-line-height - 1) * (1 - $single-line-vertical-align);
	}

	//Vamos aplicar os paddings.
	@if $padding-top != 0 { padding-top: $padding-top; }
	@if $padding-bottom != 0 { padding-bottom: $padding-bottom; }

	//Lets sum the margins.
	$margins-total: $margin-top + $margin-bottom;
	//Se o total de margins nao for multiplo das linhas.
	@if $margins-total % 1 != 0 {
		//Vamos calcular o ratio de ajuste para cumprirem o ritmo vertical.
		$margins-adjustment-ratio: ceil($margins-total) / $margins-total;
		//Vamos aplicar os ajustes.
		$margin-top: $margin-top * $margins-adjustment-ratio;
		$margin-bottom: $margin-bottom * $margins-adjustment-ratio;
	}

	//$margin-top: 0, $margin-bottom: 0, $height: 0
	@if $margin-top != 0 { margin-top: $margin-top * $unitgs-settings-base-line-ratio / $font-size * 1em; }
	@if $margin-bottom != 0 { margin-bottom: $margin-bottom * $unitgs-settings-base-line-ratio / $font-size * 1em; }

	@if $height != 0 { height: $height * $unitgs-settings-base-line-ratio / $font-size * 1em; }

	//Set debug background for visibility.
	@include debug-colors;
}